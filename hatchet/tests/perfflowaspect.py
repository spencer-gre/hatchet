# Copyright 2017-2023 Lawrence Livermore National Security, LLC and other
# Hatchet Project Developers. See the top-level LICENSE file for details.
#
# SPDX-License-Identifier: MIT

import numpy as np
import pandas as pd

import pytest
import sys

from hatchet import GraphFrame
from hatchet.readers.perfflowaspect_reader import PerfFlowAspectReader
from hatchet.external.console import ConsoleRenderer

annotations = [
    "main",
    "LagrangeLeapFrog",
    "LagrangeElements",
    "ApplyMaterialPropertiesForElems",
    "EvalEOSForElems",
    "CalcEnergyForElems",
    "CalcPressureForElems",
    "CalcSoundSpeedForElems",
    "UpdateVolumesForElems",
    "CalcTimeConstraintsForElems",
    "CalcCourantConstraintForElems",
    "CalcHydroConstraintForElems",
    "TimeIncrement",
    "LagrangeNodal",
    "CalcForceForNodes",
    "CalcVolumeForceForElems",
    "IntegrateStressForElems",
    "CalcHourglassControlForElems",
    "CalcFBHourglassForceForElems",
    "CalcLagrangeElements",
    "CalcKinematicsForElems",
    "CalcQForElems",
    "CalcMonotonicQGradientsForElems",
    "CalcMonotonicQRegionForElems",
]


def test_laghos_graphframe(laghos_perfflowaspect_array):
    """Sanity test a GraphFrame object with known data."""
    gf = GraphFrame.from_perfflowaspect(str(laghos_perfflowaspect_array))

    assert len(gf.dataframe.groupby("name")) == 4

    for col in gf.dataframe.columns:
        if col in ("ts", "dur"):
            assert gf.dataframe[col].dtype == np.float64
        elif col in ("pid", "tid"):
            assert gf.dataframe[col].dtype == np.int64
        elif col in ("name", "ph"):
            assert gf.dataframe[col].dtype == object

    # TODO: add tests to confirm values in dataframe


def test_foobar_graphframe(foobar_perfflowaspect_array):
    """Sanity test a GraphFrame object with known data."""
    gf = GraphFrame.from_perfflowaspect(str(foobar_perfflowaspect_array))

    assert len(gf.dataframe.groupby("name")) == 3
    print(gf.dataframe.dtypes)

    for col in gf.dataframe.columns:
        if col in ("ts", "dur"):
            assert gf.dataframe[col].dtype == np.float64
        elif col in ("pid", "tid"):
            assert gf.dataframe[col].dtype == np.int64
        elif col in ("name", "ph"):
            assert gf.dataframe[col].dtype == object

    # TODO: add tests to confirm values in dataframe


#def test_read_lulesh_json(lulesh_caliper_json):
#    """Sanity check the Caliper reader by examining a known input."""
#    reader = CaliperReader(str(lulesh_caliper_json))
#    reader.read_json_sections()
#
#    assert len(reader.json_data) == 192
#    assert len(reader.json_cols) == 4
#    assert len(reader.json_cols_mdata) == 4
#    assert len(reader.json_nodes) == 24
#
#    reader.create_graph()
#    assert all(an in reader.idx_to_label.values() for an in annotations)
#
#
#def test_calc_pi_json(calc_pi_caliper_json):
#    """Sanity test a GraphFrame object with known data."""
#    gf = GraphFrame.from_perfflowaspectcaliper(str(calc_pi_caliper_json))
#
#    assert len(gf.dataframe.groupby("name")) == 100
#
#
#def test_tree(lulesh_caliper_json):
#    """Sanity test a GraphFrame object with known data."""
#    gf = GraphFrame.from_caliper(str(lulesh_caliper_json))
#
#    output = ConsoleRenderer(unicode=True, color=False).render(
#        gf.graph.roots,
#        gf.dataframe,
#        metric_column="time",
#        precision=3,
#        name_column="name",
#        expand_name=False,
#        context_column="file",
#        rank=0,
#        thread=0,
#        depth=10000,
#        highlight_name=False,
#        colormap="RdYlGn",
#        invert_colormap=False,
#        render_header=True,
#    )
#    assert "121489.000 main" in output
#    assert "663.000 LagrangeElements" in output
#    assert "21493.000 CalcTimeConstraintsForElems" in output
#
#    output = ConsoleRenderer(unicode=True, color=False).render(
#        gf.graph.roots,
#        gf.dataframe,
#        metric_column="time (inc)",
#        precision=3,
#        name_column="name",
#        expand_name=False,
#        context_column="file",
#        rank=0,
#        thread=0,
#        depth=10000,
#        highlight_name=False,
#        colormap="RdYlGn",
#        invert_colormap=False,
#        render_header=True,
#    )
#    assert "662712.000 EvalEOSForElems" in output
#    assert "2895319.000 LagrangeNodal" in output
#
#
#def test_inclusive_time_calculation(lulesh_caliper_json):
#    """Validate update_inclusive_columns() on known dataset containing per-rank data."""
#    gf = GraphFrame.from_caliper(str(lulesh_caliper_json))
#
#    # save original time (inc) column for correctness check
#    gf.dataframe["orig_inc_time"] = gf.dataframe["time (inc)"]
#
#    # remove original time (inc) column since it will be generated by update_inclusive_columns()
#    del gf.dataframe["time (inc)"]
#
#    gf.update_inclusive_columns()
#    assert all(
#        gf.dataframe["time (inc)"].values == gf.dataframe["orig_inc_time"].values
#    )
